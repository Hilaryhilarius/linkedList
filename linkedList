#include <stdio.h>
#include <stdlib.h>

struct linkedList{
	struct node *headPointer;
	struct node *tailPointer;
}; //linkedList
struct node{
    int dataInt;
    struct node* nextPointer;
}; //node

struct linkedList* createLinkedList(){
    struct linkedList* newLinkedListPointer = (struct linkedList*)malloc(sizeof(struct linkedList));
    newLinkedListPointer->headPointer = NULL;
    newLinkedListPointer->tailPointer = NULL;
    return newLinkedListPointer;
} //createLinkedList()

struct node* createNode(int data){
	struct node* newNode = (struct node*)malloc(sizeof(struct node));
	newNode->dataInt = data;
	newNode->nextPointer = NULL;
	// printf("Node created\n");
	return newNode;
} //createNode()

void addFirst(struct linkedList* list, int e){
	struct node *newNodePointer = createNode(e);
	if(list->headPointer == NULL){
		// printf("list.head is NUll in addFirst\n");
		list->tailPointer = newNodePointer;
	}
	newNodePointer->nextPointer = list->headPointer;
	list->headPointer = newNodePointer;
} //addFirst()

void addLast(struct linkedList* list, int e){
	struct node *newNodePointer = createNode(e);
	if(list->headPointer == NULL){
		list->headPointer = newNodePointer;
	}
	else{
	    list->tailPointer->nextPointer = newNodePointer;
	}
	list->tailPointer = newNodePointer;
} //addLast()

struct node* removeFirst(struct linkedList* listPointer){
    struct node* oldHeadPointer = listPointer->headPointer;
    listPointer->headPointer = listPointer->headPointer->nextPointer;
    return oldHeadPointer;
}

struct node* removeLast(struct linkedList* listPointer){
    struct node* currentPointer = listPointer->headPointer;
    while(currentPointer->nextPointer->nextPointer != NULL){
        currentPointer = currentPointer->nextPointer;
    }
    listPointer->tailPointer = currentPointer;
    struct node* tempPointer = currentPointer->nextPointer;
    currentPointer->nextPointer = NULL;
    return tempPointer;
}

struct linkedList* mergeSortedLists(struct linkedList* list1Pointer, struct linkedList* list2Pointer){
    struct node* currentPointer1 = list1Pointer->headPointer;
    struct node* currentPointer2 = list2Pointer->headPointer;
    struct linkedList* newList;
    while(currentPointer1 != NULL && currentPointer2 != NULL){
        if(currentPointer1<currentPointer2){
            addLast(newList,currentPointer1->dataInt);
            currentPointer1 = currentPointer1->nextPointer;
        }//if
        else{
            addLast(newList,currentPointer2->dataInt);
            currentPointer2 = currentPointer2->nextPointer;
        }//else
        if(currentPointer1==NULL){
            while(currentPointer2!=NULL){
                addLast(newList,currentPointer2->dataInt);
                currentPointer2=currentPointer2->nextPointer;
            }//while
        }//if
        else{
            while(currentPointer1!=NULL){
                addLast(newList,currentPointer1->dataInt);
                currentPointer1=currentPointer1->nextPointer;
            }//while
        }//else
    }//while
    return newList;
}//mergeSortedLists()

void printList(struct linkedList* listPointer){
    struct node* currentPointer = listPointer->headPointer;
    if(currentPointer!=NULL){
        printf("%d",currentPointer->dataInt);
        currentPointer = currentPointer->nextPointer;
    }
    while(currentPointer!=NULL){
        printf(", %d",currentPointer->dataInt);
        currentPointer = currentPointer->nextPointer;
    }
    printf("\n");
    return;
} //printList()

struct node* search(struct linkedList* listPointer, int lookForInt){
    struct node* currentPointer = listPointer->headPointer;
    while(currentPointer!=NULL && currentPointer->dataInt!=lookForInt){
        currentPointer = currentPointer->nextPointer;
    }
    return currentPointer;
}

int main(){
    struct linkedList* newLinkedListPointer1 = createLinkedList();
    addLast(newLinkedListPointer1,1);
    addLast(newLinkedListPointer1,7);
    addLast(newLinkedListPointer1,81);
    addLast(newLinkedListPointer1,96);
    printList(newLinkedListPointer1);
    
    struct linkedList* newLinkedListPointer2 = createLinkedList();
    addLast(newLinkedListPointer2,9);
    addLast(newLinkedListPointer2,18);
    addLast(newLinkedListPointer2,32);
    addLast(newLinkedListPointer2,122);
    printList(newLinkedListPointer2);
    
    
    mergeSortedLists(newLinkedListPointer1, newLinkedListPointer2);

} //main()
